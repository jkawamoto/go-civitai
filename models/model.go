// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Model model
//
// swagger:model Model
type Model struct {

	// allow commercial use
	AllowCommercialUse []string `json:"allowCommercialUse"`

	// allow derivatives
	AllowDerivatives bool `json:"allowDerivatives,omitempty"`

	// allow different license
	AllowDifferentLicense bool `json:"allowDifferentLicense,omitempty"`

	// allow no credit
	AllowNoCredit bool `json:"allowNoCredit,omitempty"`

	// cosmetic
	Cosmetic interface{} `json:"cosmetic,omitempty"`

	// creator
	Creator *ModelCreator `json:"creator,omitempty"`

	// The description of the model (HTML).
	Description string `json:"description,omitempty"`

	// The identifier for the model.
	ID int64 `json:"id,omitempty"`

	// minor
	Minor bool `json:"minor,omitempty"`

	// model versions
	ModelVersions []*ModelVersion `json:"modelVersions"`

	// The name of the model.
	Name string `json:"name,omitempty"`

	// Whether the model is NSFW or not.
	Nsfw bool `json:"nsfw,omitempty"`

	// nsfw level
	NsfwLevel int64 `json:"nsfwLevel,omitempty"`

	// poi
	Poi bool `json:"poi,omitempty"`

	// stats
	Stats *Stats `json:"stats,omitempty"`

	// The tags associated with the model.
	Tags []string `json:"tags"`

	// The model type.
	// Enum: ["Checkpoint","TextualInversion","Hypernetwork","AestheticGradient","LORA","LyCORIS","Controlnet","Wildcards","Poses","Other"]
	Type string `json:"type,omitempty"`
}

// Validate validates this model
func (m *Model) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowCommercialUse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModelVersions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var modelAllowCommercialUseItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Image","RentCivit","Rent","Sell"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelAllowCommercialUseItemsEnum = append(modelAllowCommercialUseItemsEnum, v)
	}
}

func (m *Model) validateAllowCommercialUseItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, modelAllowCommercialUseItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Model) validateAllowCommercialUse(formats strfmt.Registry) error {
	if swag.IsZero(m.AllowCommercialUse) { // not required
		return nil
	}

	for i := 0; i < len(m.AllowCommercialUse); i++ {

		// value enum
		if err := m.validateAllowCommercialUseItemsEnum("allowCommercialUse"+"."+strconv.Itoa(i), "body", m.AllowCommercialUse[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *Model) validateCreator(formats strfmt.Registry) error {
	if swag.IsZero(m.Creator) { // not required
		return nil
	}

	if m.Creator != nil {
		if err := m.Creator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("creator")
			}
			return err
		}
	}

	return nil
}

func (m *Model) validateModelVersions(formats strfmt.Registry) error {
	if swag.IsZero(m.ModelVersions) { // not required
		return nil
	}

	for i := 0; i < len(m.ModelVersions); i++ {
		if swag.IsZero(m.ModelVersions[i]) { // not required
			continue
		}

		if m.ModelVersions[i] != nil {
			if err := m.ModelVersions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("modelVersions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("modelVersions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Model) validateStats(formats strfmt.Registry) error {
	if swag.IsZero(m.Stats) { // not required
		return nil
	}

	if m.Stats != nil {
		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

var modelTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Checkpoint","TextualInversion","Hypernetwork","AestheticGradient","LORA","LyCORIS","Controlnet","Wildcards","Poses","Other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelTypeTypePropEnum = append(modelTypeTypePropEnum, v)
	}
}

const (

	// ModelTypeCheckpoint captures enum value "Checkpoint"
	ModelTypeCheckpoint string = "Checkpoint"

	// ModelTypeTextualInversion captures enum value "TextualInversion"
	ModelTypeTextualInversion string = "TextualInversion"

	// ModelTypeHypernetwork captures enum value "Hypernetwork"
	ModelTypeHypernetwork string = "Hypernetwork"

	// ModelTypeAestheticGradient captures enum value "AestheticGradient"
	ModelTypeAestheticGradient string = "AestheticGradient"

	// ModelTypeLORA captures enum value "LORA"
	ModelTypeLORA string = "LORA"

	// ModelTypeLyCORIS captures enum value "LyCORIS"
	ModelTypeLyCORIS string = "LyCORIS"

	// ModelTypeControlnet captures enum value "Controlnet"
	ModelTypeControlnet string = "Controlnet"

	// ModelTypeWildcards captures enum value "Wildcards"
	ModelTypeWildcards string = "Wildcards"

	// ModelTypePoses captures enum value "Poses"
	ModelTypePoses string = "Poses"

	// ModelTypeOther captures enum value "Other"
	ModelTypeOther string = "Other"
)

// prop value enum
func (m *Model) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, modelTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Model) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this model based on the context it is used
func (m *Model) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModelVersions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model) contextValidateCreator(ctx context.Context, formats strfmt.Registry) error {

	if m.Creator != nil {

		if swag.IsZero(m.Creator) { // not required
			return nil
		}

		if err := m.Creator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("creator")
			}
			return err
		}
	}

	return nil
}

func (m *Model) contextValidateModelVersions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ModelVersions); i++ {

		if m.ModelVersions[i] != nil {

			if swag.IsZero(m.ModelVersions[i]) { // not required
				return nil
			}

			if err := m.ModelVersions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("modelVersions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("modelVersions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Model) contextValidateStats(ctx context.Context, formats strfmt.Registry) error {

	if m.Stats != nil {

		if swag.IsZero(m.Stats) { // not required
			return nil
		}

		if err := m.Stats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Model) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Model) UnmarshalBinary(b []byte) error {
	var res Model
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
